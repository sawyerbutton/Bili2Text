version: '3.8'

services:
  # Bili2Text Web应用
  bili2text-web:
    build: .
    container_name: bili2text-web
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///data/bili2text.db
      - SECRET_KEY=${SECRET_KEY:-bili2text-web-secret-key-2024}
      - MAX_CONCURRENT_TASKS=${MAX_CONCURRENT_TASKS:-3}
      - TASK_TIMEOUT=${TASK_TIMEOUT:-3600}
      - USE_PROXY=${USE_PROXY:-false}
      - PROXY_URL=${PROXY_URL:-}
    volumes:
      - ./storage:/app/storage
      - ./data:/app/data
      - ./webapp/logs:/app/webapp/logs
    networks:
      - bili2text-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: bili2text-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - bili2text-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: bili2text-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - bili2text-network
    depends_on:
      - bili2text-web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis-data:
    driver: local

networks:
  bili2text-network:
    driver: bridge 